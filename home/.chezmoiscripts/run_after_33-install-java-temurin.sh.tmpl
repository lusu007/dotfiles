#!/usr/bin/env bash

# {{ template "scripts-library" }}

# The following line is for ShellCheck to correctly identify the above include
true || source ../.chezmoitemplates/scripts-library

function is_java_installed() {
  # Check if any Java version is installed via SDKMAN!
  [[ -d "${HOME}/.sdkman/candidates/java" ]] && [[ -n "$(ls -A "${HOME}/.sdkman/candidates/java" 2>/dev/null)" ]]
}

function is_lts_temurin_installed() {
  # Check if the latest LTS Temurin version is already installed
  local latest_version
  latest_version=$(get_latest_lts_temurin)
  if [[ -n "${latest_version}" ]]; then
    [[ -d "${HOME}/.sdkman/candidates/java/${latest_version}" ]]
  else
    return 1
  fi
}

function get_latest_lts_temurin() {
  # Get the latest LTS Temurin version from SDKMAN!
  # This will return something like "17.0.2-tem"
  # Note: This function assumes SDKMAN! is already initialized in the calling context

  # Wait a moment for SDKMAN! to be ready
  sleep 2

  # Get the list directly (no timeout needed as sdk list is fast)
  local java_list
  java_list=$(sdk list java 2>/dev/null) || return 1

  # Check if we got any output
  if [[ -z "${java_list}" ]]; then
    return 1
  fi

  echo "${java_list}" | grep -i temurin | head -1 | awk '{print $NF}' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//'
}

function install_java_temurin() {
  log_task "Installing latest LTS Temurin JDK via SDKMAN!"

  # Initialize SDKMAN! in the main shell context
  # Temporarily disable set -u to avoid unbound variable errors with SDKMAN!
  set +u
  if ! source "${HOME}/.sdkman/bin/sdkman-init.sh" 2>/dev/null; then
    log_error "Failed to initialize SDKMAN!"
    set -u
    return 1
  fi
  # Keep set +u for the rest of the function since SDKMAN! may use unbound variables

  # Wait a moment for SDKMAN! to be ready
  sleep 2

  # Verify SDKMAN! is working
  if ! command -v sdk >/dev/null 2>&1; then
    log_error "SDKMAN! 'sdk' command not found after initialization"
    return 1
  fi

  # Get the latest LTS Temurin version
  local version
  version=$(get_latest_lts_temurin)

  if [[ -z "${version}" ]]; then
    log_error "Could not determine latest LTS Temurin version"
    return 1
  fi

  log_info "Installing Java Temurin version: ${version}"

  # Install the latest LTS Temurin JDK with error handling
  log_info "Running: sdk install java ${version}"
  if ! sdk install java "${version}"; then
    log_error "Failed to install Java ${version}"
    log_info "SDKMAN! installation failed. This might be due to:"
    log_info "  - Network connectivity issues"
    log_info "  - Insufficient disk space"
    log_info "  - SDKMAN! not properly initialized"
    log_info "You can try running manually: sdk install java ${version}"
    return 1
  fi

  # Set it as the default version
  log_task "Setting Java ${version} as default"
  if ! sdk default java "${version}"; then
    log_error "Failed to set Java ${version} as default"
    return 1
  fi

  # Store the version for environment setup
  local java_version="${version}"

  # Set up Java environment variables in the current shell
  log_task "Setting up Java environment variables"

  # Set JAVA_HOME to the installed Java version
  if [[ -d "${HOME}/.sdkman/candidates/java/current" ]]; then
    export JAVA_HOME="${HOME}/.sdkman/candidates/java/current"
    export PATH="${JAVA_HOME}/bin:${PATH}"
  else
    log_warning "Java installation directory not found at ${HOME}/.sdkman/candidates/java/current"
  fi

  # Add Java environment to shell configuration files
  local shell_configs=("${HOME}/.bashrc" "${HOME}/.zshrc" "${HOME}/.profile")

  for config in "${shell_configs[@]}"; do
    if [[ -f "${config}" ]]; then
      # Add Java environment if not already present
      if ! grep -q "SDKMAN Java" "${config}"; then
        log_info "Adding Java environment to ${config}"
        cat >> "${config}" << 'EOF'

# SDKMAN Java
export JAVA_HOME="$HOME/.sdkman/candidates/java/current"
export PATH="$JAVA_HOME/bin:$PATH"
EOF
      fi
    fi
  done

  log_info "Java environment configured: JAVA_HOME=${JAVA_HOME}"
  log_task "Java Temurin installation completed"
}

# Only install if SDKMAN! is available and LTS Temurin is not already installed
if [[ -f "${HOME}/.sdkman/bin/sdkman-init.sh" ]]; then
  # Initialize SDKMAN! first
  set +u
  if source "${HOME}/.sdkman/bin/sdkman-init.sh" 2>/dev/null; then
    # Check if we can get the latest version (this tests SDKMAN functionality)
    latest_version=$(get_latest_lts_temurin)

    if [[ -n "${latest_version}" ]]; then
      if ! is_lts_temurin_installed; then
        install_java_temurin
      else
        log_info "Latest LTS Temurin Java (${latest_version}) is already installed via SDKMAN!"
      fi
    else
      log_warning "Could not determine latest LTS Temurin version. Skipping Java installation."
    fi
  else
    log_error "Failed to initialize SDKMAN! for Java installation check"
  fi
  set -u
else
  log_error "SDKMAN! is not available. Please ensure SDKMAN! is installed first."
fi
