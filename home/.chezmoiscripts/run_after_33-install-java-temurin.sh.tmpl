#!/usr/bin/env bash

# {{ template "scripts-library" }}

# The following line is for ShellCheck to correctly identify the above include
true || source ../.chezmoitemplates/scripts-library

function is_java_installed() {
  # Check if any Java version is installed via SDKMAN!
  [[ -d "${HOME}/.sdkman/candidates/java" ]] && [[ -n "$(ls -A "${HOME}/.sdkman/candidates/java" 2>/dev/null)" ]]
}

function is_lts_temurin_installed() {
  # Check if the latest LTS Temurin version is already installed
  local latest_version
  latest_version=$(get_latest_lts_temurin)
  if [[ -n "${latest_version}" ]]; then
    [[ -d "${HOME}/.sdkman/candidates/java/${latest_version}" ]]
  else
    return 1
  fi
}

function get_latest_lts_temurin() {
  # Get the latest LTS Temurin version from SDKMAN!
  # This will return something like "17.0.2-tem"
  # Run in subshell to avoid set -u issues
  (
    set +u
    source "${HOME}/.sdkman/bin/sdkman-init.sh" 2>/dev/null || return 1

    # Wait a moment for SDKMAN! to be ready
    sleep 2

    # Get the list directly (no timeout needed as sdk list is fast)
    local java_list
    java_list=$(sdk list java 2>/dev/null) || return 1

    # Check if we got any output
    if [[ -z "${java_list}" ]]; then
      return 1
    fi

    echo "${java_list}" | grep -i temurin | head -1 | awk '{print $NF}' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//'
  )
}

function install_java_temurin() {
  log_task "Installing latest LTS Temurin JDK via SDKMAN!"

  # Run SDKMAN operations in a subshell without set -u to avoid unbound variable errors
  local java_version
  java_version=$(
    set +u
    source "${HOME}/.sdkman/bin/sdkman-init.sh" 2>/dev/null || {
      log_error "Failed to initialize SDKMAN!"
      exit 1
    }

    # Wait a moment for SDKMAN! to be ready
    sleep 2

    # Get the latest LTS Temurin version
    local version
    version=$(get_latest_lts_temurin)

    if [[ -z "${version}" ]]; then
      log_error "Could not determine latest LTS Temurin version"
      exit 1
    fi

    log_info "Installing Java Temurin version: ${version}"

    # Install the latest LTS Temurin JDK with error handling
    if ! sdk install java "${version}"; then
      log_error "Failed to install Java ${version}"
      exit 1
    fi

    # Set it as the default version
    log_task "Setting Java ${version} as default"
    if ! sdk default java "${version}"; then
      log_error "Failed to set Java ${version} as default"
      exit 1
    fi

    # Return the version for the parent shell
    echo "${version}"
  )

  if [[ -n "${java_version}" ]]; then
    # Set up Java environment variables in the current shell
    log_task "Setting up Java environment variables"

    # Source SDKMAN to get access to Java
    if ! source "${HOME}/.sdkman/bin/sdkman-init.sh" 2>/dev/null; then
      log_warning "Failed to initialize SDKMAN! for environment setup, but Java is installed"
      log_info "You may need to restart your shell or run 'source ~/.sdkman/bin/sdkman-init.sh'"
    fi

    # Set JAVA_HOME to the installed Java version
    if [[ -d "${HOME}/.sdkman/candidates/java/current" ]]; then
      export JAVA_HOME="${HOME}/.sdkman/candidates/java/current"
      export PATH="${JAVA_HOME}/bin:${PATH}"
    else
      log_warning "Java installation directory not found at ${HOME}/.sdkman/candidates/java/current"
    fi

    # Add Java environment to shell configuration files
    local shell_configs=("${HOME}/.bashrc" "${HOME}/.zshrc" "${HOME}/.profile")

    for config in "${shell_configs[@]}"; do
      if [[ -f "${config}" ]]; then
        # Add Java environment if not already present
        if ! grep -q "SDKMAN Java" "${config}"; then
          log_info "Adding Java environment to ${config}"
          cat >> "${config}" << 'EOF'

# SDKMAN Java
export JAVA_HOME="$HOME/.sdkman/candidates/java/current"
export PATH="$JAVA_HOME/bin:$PATH"
EOF
        fi
      fi
    done

    log_info "Java environment configured: JAVA_HOME=${JAVA_HOME}"
  fi

  log_task "Java Temurin installation completed"
}

# Only install if SDKMAN! is available and LTS Temurin is not already installed
if [[ -f "${HOME}/.sdkman/bin/sdkman-init.sh" ]]; then
  # Check if we can get the latest version (this tests SDKMAN functionality)
  latest_version=$(get_latest_lts_temurin)

  if [[ -n "${latest_version}" ]]; then
    if ! is_lts_temurin_installed; then
      install_java_temurin
    else
      log_info "Latest LTS Temurin Java (${latest_version}) is already installed via SDKMAN!"
    fi
  else
    log_warning "Could not determine latest LTS Temurin version. Skipping Java installation."
  fi
else
  log_error "SDKMAN! is not available. Please ensure SDKMAN! is installed first."
fi
