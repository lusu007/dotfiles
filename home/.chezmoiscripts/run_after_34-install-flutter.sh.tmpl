#!/usr/bin/env bash

# {{ template "scripts-library" }}

# The following line is for ShellCheck to correctly identify the above include
true || source ../.chezmoitemplates/scripts-library

# Flutter installation configuration
readonly FLUTTER_VERSION="stable"
readonly FLUTTER_INSTALL_DIR="${HOME}/development/flutter"
readonly ANDROID_SDK_DIR="${HOME}/Android/Sdk"
readonly ANDROID_STUDIO_DIR="${HOME}/android-studio"

function is_flutter_installed() {
  [[ -d "${FLUTTER_INSTALL_DIR}" ]] && [[ -f "${FLUTTER_INSTALL_DIR}/bin/flutter" ]]
}

function is_android_sdk_installed() {
  [[ -d "${ANDROID_SDK_DIR}" ]] && [[ -f "${ANDROID_SDK_DIR}/cmdline-tools/latest/bin/sdkmanager" ]]
}

function is_android_studio_installed() {
  [[ -d "${ANDROID_STUDIO_DIR}" ]] && [[ -f "${ANDROID_STUDIO_DIR}/bin/studio.sh" ]]
}

function setup_java_environment() {
  log_task "Setting up Java environment for Android SDK"

  # Check if JAVA_HOME is already set
  if [[ -n "${JAVA_HOME}" ]] && [[ -f "${JAVA_HOME}/bin/java" ]]; then
    log_info "JAVA_HOME is already set: ${JAVA_HOME}"
    return 0
  fi

  # Try to find Java via SDKMAN
  if [[ -f "${HOME}/.sdkman/bin/sdkman-init.sh" ]]; then
    log_info "Initializing SDKMAN to find Java"
    source "${HOME}/.sdkman/bin/sdkman-init.sh" 2>/dev/null || {
      log_error "Failed to initialize SDKMAN!"
      return 1
    }

    # Set JAVA_HOME to SDKMAN's current Java
    if [[ -d "${HOME}/.sdkman/candidates/java/current" ]]; then
      export JAVA_HOME="${HOME}/.sdkman/candidates/java/current"
      export PATH="${JAVA_HOME}/bin:${PATH}"
      log_info "Java found via SDKMAN: JAVA_HOME=${JAVA_HOME}"
      return 0
    fi
  fi

  # Try to find Java in system PATH
  local java_path
  java_path=""
  java_path=$(command -v java 2>/dev/null)
  if [[ -n "${java_path}" ]]; then
    # Get the directory containing java and set JAVA_HOME
    local java_dir
    java_dir=""
    java_dir=$(dirname "${java_path}")
    local java_home_dir
    java_home_dir=""
    java_home_dir=$(dirname "${java_dir}")
    export JAVA_HOME="${java_home_dir}"
    export PATH="${JAVA_HOME}/bin:${PATH}"
    log_info "Java found in system PATH: JAVA_HOME=${JAVA_HOME}"
    return 0
  fi

  log_error "No Java installation found. Please install Java first."
  return 1
}

function install_flutter_dependencies() {
  log_task "Installing Flutter system dependencies"

  # Install required packages for Flutter development
  local packages=(
    "curl"
    "file"
    "git"
    "unzip"
    "xz-utils"
    "zip"
    "libglu1-mesa"
    "lib32stdc++6"
    "lib32z1"
    "lib32ncurses6"
    "libc6-i386"
    "libstdc++6"
    "libgcc-s1"
    "libxss1"
    "libasound2t64"
    "libxtst6"
    "libxrandr2"
    "libpangocairo-1.0-0"
    "libatk1.0-0"
    "libcairo-gobject2"
    "libgtk-3-0"
    "libgdk-pixbuf2.0-0"
  )

  # Update package list once
  sudo apt update

  # Install packages with conflict resolution
  for package in "${packages[@]}"; do
    if ! is_apt_package_installed "${package}"; then
      log_info "Installing ${package}"
      # Try to install with conflict resolution
      if ! sudo env DEBIAN_FRONTEND=noninteractive apt install --yes --no-install-recommends "${package}"; then
        log_warning "Failed to install ${package}, trying with --fix-broken"
        sudo env DEBIAN_FRONTEND=noninteractive apt install --yes --fix-broken "${package}" || true
      fi
    fi
  done
}

function install_flutter() {
  log_task "Installing Flutter SDK"

  # Create development directory
  c mkdir -p "${HOME}/development"

  # Download and install Flutter
  if [[ ! -d "${FLUTTER_INSTALL_DIR}" ]]; then
    log_info "Downloading Flutter SDK"
    c git clone https://github.com/flutter/flutter.git -b "${FLUTTER_VERSION}" "${FLUTTER_INSTALL_DIR}"
  else
    log_info "Flutter directory exists, updating to latest ${FLUTTER_VERSION}"
    c git -C "${FLUTTER_INSTALL_DIR}" fetch origin
    c git -C "${FLUTTER_INSTALL_DIR}" checkout "${FLUTTER_VERSION}"
    c git -C "${FLUTTER_INSTALL_DIR}" pull origin "${FLUTTER_VERSION}"
  fi

  # Add Flutter to PATH for current session
  ensure_path_entry "${FLUTTER_INSTALL_DIR}/bin"

  # Precache Flutter dependencies
  log_task "Precaching Flutter dependencies"
  c "${FLUTTER_INSTALL_DIR}/bin/flutter" precache

  log_task "Flutter SDK installation completed"
}

function install_android_sdk() {
  log_task "Installing Android SDK Command Line Tools"

  # Setup Java environment first
  if ! setup_java_environment; then
    log_error "Failed to setup Java environment. Cannot proceed with Android SDK installation."
    return 1
  fi

  # Create Android directory
  c mkdir -p "${ANDROID_SDK_DIR}"

  # Download Android Command Line Tools
  local cmdline_tools_url="https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip"
  local cmdline_tools_zip="/tmp/commandlinetools-linux.zip"

  if [[ ! -f "${cmdline_tools_zip}" ]]; then
    log_info "Downloading Android Command Line Tools"
    c curl -L -o "${cmdline_tools_zip}" "${cmdline_tools_url}"
  fi

  # Extract and setup command line tools
  if [[ ! -d "${ANDROID_SDK_DIR}/cmdline-tools" ]]; then
    log_info "Extracting Android Command Line Tools"
    c unzip -q "${cmdline_tools_zip}" -d "${ANDROID_SDK_DIR}/cmdline-tools"
    c mv "${ANDROID_SDK_DIR}/cmdline-tools/cmdline-tools" "${ANDROID_SDK_DIR}/cmdline-tools/latest"
  fi

  # Add Android SDK to PATH
  ensure_path_entry "${ANDROID_SDK_DIR}/cmdline-tools/latest/bin"
  ensure_path_entry "${ANDROID_SDK_DIR}/platform-tools"
  ensure_path_entry "${ANDROID_SDK_DIR}/emulator"

  # Accept Android SDK licenses
  log_task "Accepting Android SDK licenses"
  ANDROID_HOME="${ANDROID_SDK_DIR}" ANDROID_SDK_ROOT="${ANDROID_SDK_DIR}" JAVA_HOME="${JAVA_HOME}" echo "y" | "${ANDROID_SDK_DIR}/cmdline-tools/latest/bin/sdkmanager" --licenses || true

  # Install essential Android SDK components
  log_task "Installing essential Android SDK components"
  local sdk_components=(
    "platform-tools"
    "platforms;android-34"
    "platforms;android-33"
    "platforms;android-32"
    "build-tools;34.0.0"
    "build-tools;33.0.2"
    "build-tools;32.0.0"
    "emulator"
    "system-images;android-34;google_apis;x86_64"
    "system-images;android-33;google_apis;x86_64"
  )

  for component in "${sdk_components[@]}"; do
    log_info "Installing Android SDK component: ${component}"
    ANDROID_HOME="${ANDROID_SDK_DIR}" ANDROID_SDK_ROOT="${ANDROID_SDK_DIR}" JAVA_HOME="${JAVA_HOME}" c "${ANDROID_SDK_DIR}/cmdline-tools/latest/bin/sdkmanager" "${component}"
  done

  # Clean up downloaded zip
  c rm -f "${cmdline_tools_zip}"

  log_task "Android SDK installation completed"
}

function install_android_studio() {
  log_task "Installing Android Studio"

  # Download Android Studio
  local android_studio_url="https://redirector.gvt1.com/edgedl/android/studio/ide-zips/2023.3.1.18/android-studio-2023.3.1.18-linux.tar.gz"
  local android_studio_tar="/tmp/android-studio.tar.gz"

  if [[ ! -f "${android_studio_tar}" ]]; then
    log_info "Downloading Android Studio"
    c curl -L -o "${android_studio_tar}" "${android_studio_url}"
  fi

  # Extract Android Studio
  if [[ ! -d "${ANDROID_STUDIO_DIR}" ]]; then
    log_info "Extracting Android Studio"
    c tar -xzf "${android_studio_tar}" -C "/tmp"
    c mv "/tmp/android-studio" "${ANDROID_STUDIO_DIR}"
  fi

  # Add Android Studio to PATH
  ensure_path_entry "${ANDROID_STUDIO_DIR}/bin"

  # Clean up downloaded tar
  c rm -f "${android_studio_tar}"

  log_task "Android Studio installation completed"
}

function configure_flutter_environment() {
  log_task "Configuring Flutter environment"

  # Setup Java environment first
  setup_java_environment

  # Set Android SDK environment variables
  export ANDROID_HOME="${ANDROID_SDK_DIR}"
  export ANDROID_SDK_ROOT="${ANDROID_SDK_DIR}"

  # Add environment variables to shell configuration
  local shell_configs=("${HOME}/.bashrc" "${HOME}/.zshrc" "${HOME}/.profile")

  for config in "${shell_configs[@]}"; do
    if [[ -f "${config}" ]]; then
      # Add Flutter to PATH
      if ! grep -q "Flutter SDK" "${config}"; then
        log_info "Adding Flutter to PATH in ${config}"
        cat >> "${config}" << 'EOF'

# Flutter SDK
export PATH="$HOME/development/flutter/bin:$PATH"

# Android SDK
export ANDROID_HOME="$HOME/Android/Sdk"
export ANDROID_SDK_ROOT="$HOME/Android/Sdk"
export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$PATH"
export PATH="$ANDROID_HOME/platform-tools:$PATH"
export PATH="$ANDROID_HOME/emulator:$PATH"

# Android Studio
export PATH="$HOME/android-studio/bin:$PATH"

# Java (SDKMAN)
export JAVA_HOME="$HOME/.sdkman/candidates/java/current"
export PATH="$JAVA_HOME/bin:$PATH"
EOF
      fi
    fi
  done

  log_task "Flutter environment configuration completed"
}

function run_flutter_doctor() {
  log_task "Running Flutter doctor to verify installation"

  # Setup Java environment first
  setup_java_environment

  # Ensure Flutter is in PATH
  ensure_path_entry "${FLUTTER_INSTALL_DIR}/bin"

  # Set Android SDK environment variables
  export ANDROID_HOME="${ANDROID_SDK_DIR}"
  export ANDROID_SDK_ROOT="${ANDROID_SDK_DIR}"

  # Run Flutter doctor
  log_info "Flutter doctor output:"
  c "${FLUTTER_INSTALL_DIR}/bin/flutter" doctor -v

  log_task "Flutter installation verification completed"
}

# Main installation process
log_task "Starting Flutter installation with all dependencies"

# Install system dependencies
install_flutter_dependencies

# Install Flutter SDK
if ! is_flutter_installed; then
  install_flutter
else
  log_info "Flutter is already installed"
fi

# Install Android SDK
if ! is_android_sdk_installed; then
  install_android_sdk
else
  log_info "Android SDK is already installed"
fi

# Install Android Studio
if ! is_android_studio_installed; then
  install_android_studio
else
  log_info "Android Studio is already installed"
fi

# Configure environment
configure_flutter_environment

# Verify installation
run_flutter_doctor

log_task "Flutter installation with all dependencies completed successfully!"
log_info "Please restart your terminal or run 'source ~/.bashrc' to use Flutter commands"
