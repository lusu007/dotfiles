#!/usr/bin/env bash

# {{ template "scripts-library" }}

# The following line is for ShellCheck to correctly identify the above include
true || source ../.chezmoitemplates/scripts-library

# Flutter installation configuration
readonly FLUTTER_VERSION="stable"
readonly FLUTTER_INSTALL_DIR="${HOME}/development/flutter"
readonly ANDROID_SDK_DIR="${HOME}/Android/Sdk"
readonly ANDROID_STUDIO_DIR="${HOME}/development/android-studio"

function is_flutter_installed() {
  [[ -d "${FLUTTER_INSTALL_DIR}" ]] && [[ -f "${FLUTTER_INSTALL_DIR}/bin/flutter" ]]
}

function is_android_sdk_installed() {
  [[ -d "${ANDROID_SDK_DIR}" ]] && [[ -f "${ANDROID_SDK_DIR}/cmdline-tools/latest/bin/sdkmanager" ]]
}

# Android Studio is not required for Flutter Android development
# function is_android_studio_installed() {
#   [[ -d "${ANDROID_STUDIO_DIR}" ]] && [[ -f "${ANDROID_STUDIO_DIR}/bin/studio.sh" ]]
# }

function setup_java_environment() {
  log_task "Setting up Java environment for Android SDK"

  # Check if JAVA_HOME is already set
  if [[ -n "${JAVA_HOME:-}" ]] && [[ -f "${JAVA_HOME}/bin/java" ]]; then
    log_info "JAVA_HOME is already set: ${JAVA_HOME}"
    return 0
  fi

  # Try to find Java via SDKMAN
  if [[ -f "${HOME}/.sdkman/bin/sdkman-init.sh" ]]; then
    log_info "Initializing SDKMAN to find Java"
    # Temporarily disable set -u for SDKMAN initialization
    set +u
    if ! source "${HOME}/.sdkman/bin/sdkman-init.sh" 2>/dev/null; then
      log_error "Failed to initialize SDKMAN!"
      set -u
      return 1
    fi
    set -u

    # Set JAVA_HOME to SDKMAN's current Java
    if [[ -d "${HOME}/.sdkman/candidates/java/current" ]]; then
      export JAVA_HOME="${HOME}/.sdkman/candidates/java/current"
      export PATH="${JAVA_HOME}/bin:${PATH}"
      log_info "Java found via SDKMAN: JAVA_HOME=${JAVA_HOME}"
      return 0
    fi
  fi

  # Try to find Java in system PATH
  local java_path
  java_path=""
  java_path=$(command -v java 2>/dev/null)
  if [[ -n "${java_path}" ]]; then
    # Get the directory containing java and set JAVA_HOME
    local java_dir
    java_dir=""
    java_dir=$(dirname "${java_path}")
    local java_home_dir
    java_home_dir=""
    java_home_dir=$(dirname "${java_dir}")
    export JAVA_HOME="${java_home_dir}"
    export PATH="${JAVA_HOME}/bin:${PATH}"
    log_info "Java found in system PATH: JAVA_HOME=${JAVA_HOME}"
    return 0
  fi

  log_error "No Java installation found. Please install Java first."
  return 1
}

function install_flutter_dependencies() {
  log_task "Installing Flutter system dependencies"

  # Install required packages for Flutter development
  local packages=(
    "curl"
    "file"
    "git"
    "unzip"
    "xz-utils"
    "zip"
    "libglu1-mesa"
    "lib32stdc++6"
    "lib32z1"
    "lib32ncurses6"
    "libc6-i386"
    "libstdc++6"
    "libgcc-s1"
    "libxss1"
    "libasound2t64"
    "libxtst6"
    "libxrandr2"
    "libpangocairo-1.0-0"
    "libatk1.0-0"
    "libcairo-gobject2"
    "libgtk-3-0"
    "libgdk-pixbuf2.0-0"
    # Additional Linux development libraries
    "libgtk-3-dev"
    "mesa-utils"
  )

  # Update package list once
  sudo apt update

  # Install packages with conflict resolution
  for package in "${packages[@]}"; do
    if ! is_apt_package_installed "${package}"; then
      log_info "Installing ${package}"
      # Try to install with conflict resolution
      if ! sudo env DEBIAN_FRONTEND=noninteractive apt install --yes --no-install-recommends "${package}"; then
        log_warning "Failed to install ${package}, trying with --fix-broken"
        sudo env DEBIAN_FRONTEND=noninteractive apt install --yes --fix-broken "${package}" || true
      fi
    fi
  done
}

function install_linux_toolchain() {
  log_task "Installing Linux toolchain for Flutter desktop development"

  # Linux toolchain dependencies for Flutter desktop development
  local linux_packages=(
    "clang"
    "cmake"
    "ninja-build"
    "pkg-config"
  )

  # Install Linux toolchain packages
  for package in "${linux_packages[@]}"; do
    if ! is_apt_package_installed "${package}"; then
      log_info "Installing Linux toolchain package: ${package}"
      # Try to install with conflict resolution
      if ! sudo env DEBIAN_FRONTEND=noninteractive apt install --yes --no-install-recommends "${package}"; then
        log_warning "Failed to install ${package}, trying with --fix-broken"
        sudo env DEBIAN_FRONTEND=noninteractive apt install --yes --fix-broken "${package}" || true
      fi
    else
      log_info "Linux toolchain package ${package} is already installed"
    fi
  done

  log_task "Linux toolchain installation completed"
}

function install_chrome() {
  log_task "Installing Google Chrome for Flutter web development"

  # Check if Chrome is already installed
  if command -v google-chrome >/dev/null 2>&1; then
    log_info "Google Chrome is already installed"
    return 0
  fi

  # Update package list
  sudo apt update

  # Install Google Chrome
  log_info "Installing Google Chrome"
  sudo env DEBIAN_FRONTEND=noninteractive apt install --yes --no-install-recommends google-chrome-stable

  # Verify installation
  if command -v google-chrome >/dev/null 2>&1; then
    log_info "Google Chrome installed successfully"
    log_info "Chrome version: $(google-chrome --version)"
  else
    log_warning "Google Chrome installation may have failed"
  fi
}

function is_android_studio_installed() {
  [[ -d "${ANDROID_STUDIO_DIR}" ]] && [[ -f "${ANDROID_STUDIO_DIR}/bin/studio.sh" ]]
}

function install_android_studio() {
  log_task "Installing Android Studio"

  # Check if Android Studio is already installed
  if is_android_studio_installed; then
    log_info "Android Studio is already installed"
    return 0
  fi

  # Create development directory
  mkdir -p "${HOME}/development"

  # Download Android Studio
  local android_studio_url="https://redirector.gvt1.com/edgedl/android/studio/ide-zips/2025.1.3.7/android-studio-2025.1.3.7-linux.tar.gz"
  local android_studio_tar="/tmp/android-studio.tar.gz"

  log_info "Downloading Android Studio"
  curl -L -o "${android_studio_tar}" "${android_studio_url}"

  # Verify download
  if [[ ! -s "${android_studio_tar}" ]]; then
    log_error "Android Studio download failed or file is empty"
    return 1
  fi

  # Extract Android Studio
  log_info "Extracting Android Studio"
  tar -xzf "${android_studio_tar}" -C "${HOME}/development"

  # Move to final location
  if [[ -d "${HOME}/development/android-studio" ]]; then
    rm -rf "${ANDROID_STUDIO_DIR}"
    mv "${HOME}/development/android-studio" "${ANDROID_STUDIO_DIR}"
  fi

  # Make studio.sh executable
  chmod +x "${ANDROID_STUDIO_DIR}/bin/studio.sh"

  # Clean up downloaded tar
  rm -f "${android_studio_tar}"

  # Verify installation
  if is_android_studio_installed; then
    log_info "Android Studio installed successfully"
    log_info "Android Studio location: ${ANDROID_STUDIO_DIR}"
  else
    log_warning "Android Studio installation may have failed"
  fi
}

function configure_android_studio_for_flutter() {
  log_task "Configuring Android Studio for Flutter detection"

  # Create Android Studio configuration directories
  local config_dir="${HOME}/.config/Google/AndroidStudio2025.1"
  local cache_dir="${HOME}/.cache/Google/AndroidStudio2025.1"
  local data_dir="${HOME}/.local/share/Google/AndroidStudio2025.1"

  mkdir -p "${config_dir}" "${cache_dir}" "${data_dir}"

  # Create build.txt with version information
  cat > "${config_dir}/build.txt" << 'EOF'
AI-251.11496.300.2511.12345678
EOF

  # Create studio.properties
  cat > "${config_dir}/studio.properties" << EOF
# Android Studio properties
idea.config.path=${config_dir}
idea.system.path=${cache_dir}
idea.plugins.path=${data_dir}/plugins
idea.log.path=${cache_dir}/logs
EOF

  # Ensure studio.sh is executable
  chmod +x "${ANDROID_STUDIO_DIR}/bin/studio.sh"

  log_info "Android Studio configuration completed"
}

function install_flutter() {
  log_task "Installing Flutter SDK"

  # Create development directory
  mkdir -p "${HOME}/development"

  # Download and install Flutter
  if [[ ! -d "${FLUTTER_INSTALL_DIR}" ]]; then
    log_info "Downloading Flutter SDK"
    git clone https://github.com/flutter/flutter.git -b "${FLUTTER_VERSION}" "${FLUTTER_INSTALL_DIR}"
  else
    log_info "Flutter directory exists, updating to latest ${FLUTTER_VERSION}"
    git -C "${FLUTTER_INSTALL_DIR}" fetch origin
    git -C "${FLUTTER_INSTALL_DIR}" checkout "${FLUTTER_VERSION}"
    git -C "${FLUTTER_INSTALL_DIR}" pull origin "${FLUTTER_VERSION}"
  fi

  # Add Flutter to PATH for current session
  ensure_path_entry "${FLUTTER_INSTALL_DIR}/bin"

  # Precache Flutter dependencies
  log_task "Precaching Flutter dependencies"
  "${FLUTTER_INSTALL_DIR}/bin/flutter" precache

  log_task "Flutter SDK installation completed"
}

function install_android_sdk() {
  log_task "Installing Android SDK Command Line Tools"

  # Setup Java environment first
  if ! setup_java_environment; then
    log_error "Failed to setup Java environment. Cannot proceed with Android SDK installation."
    return 1
  fi

  # Create Android directory
  mkdir -p "${ANDROID_SDK_DIR}"

  # Download Android Command Line Tools
  local cmdline_tools_url="https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip"
  local cmdline_tools_zip="/tmp/commandlinetools-linux.zip"

  if [[ ! -f "${cmdline_tools_zip}" ]]; then
    log_info "Downloading Android Command Line Tools"
    curl -L -o "${cmdline_tools_zip}" "${cmdline_tools_url}"
  fi

  # Extract and setup command line tools
  if [[ ! -d "${ANDROID_SDK_DIR}/cmdline-tools" ]]; then
    log_info "Extracting Android Command Line Tools"
    unzip -q "${cmdline_tools_zip}" -d "${ANDROID_SDK_DIR}/cmdline-tools"
    mv "${ANDROID_SDK_DIR}/cmdline-tools/cmdline-tools" "${ANDROID_SDK_DIR}/cmdline-tools/latest"
  fi

  # Add Android SDK to PATH
  ensure_path_entry "${ANDROID_SDK_DIR}/cmdline-tools/latest/bin"
  ensure_path_entry "${ANDROID_SDK_DIR}/platform-tools"
  ensure_path_entry "${ANDROID_SDK_DIR}/emulator"

  # Export PATH for current session
  export PATH="${ANDROID_SDK_DIR}/cmdline-tools/latest/bin:${ANDROID_SDK_DIR}/platform-tools:${ANDROID_SDK_DIR}/emulator:${PATH}"

  # Accept Android SDK licenses
  log_task "Accepting Android SDK licenses"
  # Use yes command to automatically accept all licenses
  if yes | ANDROID_HOME="${ANDROID_SDK_DIR}" ANDROID_SDK_ROOT="${ANDROID_SDK_DIR}" JAVA_HOME="${JAVA_HOME}" "${ANDROID_SDK_DIR}/cmdline-tools/latest/bin/sdkmanager" --licenses; then
    log_info "Android SDK licenses accepted successfully"
  else
    log_warning "Failed to accept all Android SDK licenses automatically"
    log_info "You may need to run 'flutter doctor --android-licenses' manually later"
  fi

  # Install essential Android SDK components
  log_task "Installing essential Android SDK components"
  local sdk_components=(
    "platform-tools"
    "platforms;android-34"
    "platforms;android-33"
    "platforms;android-32"
    "build-tools;34.0.0"
    "build-tools;33.0.2"
    "build-tools;32.0.0"
    "emulator"
    "system-images;android-34;google_apis;x86_64"
    "system-images;android-33;google_apis;x86_64"
  )

  for component in "${sdk_components[@]}"; do
    log_info "Installing Android SDK component: ${component}"
    ANDROID_HOME="${ANDROID_SDK_DIR}" ANDROID_SDK_ROOT="${ANDROID_SDK_DIR}" JAVA_HOME="${JAVA_HOME}" "${ANDROID_SDK_DIR}/cmdline-tools/latest/bin/sdkmanager" "${component}"
  done

  # Clean up downloaded zip
  rm -f "${cmdline_tools_zip}"

  # Verify Android SDK installation
  log_task "Verifying Android SDK installation"
  if [[ -f "${ANDROID_SDK_DIR}/platform-tools/adb" ]]; then
    log_info "Android SDK platform-tools installed successfully"
    log_info "ADB location: ${ANDROID_SDK_DIR}/platform-tools/adb"
  else
    log_warning "Android SDK platform-tools not found. ADB may not be available."
  fi

  if [[ -f "${ANDROID_SDK_DIR}/cmdline-tools/latest/bin/sdkmanager" ]]; then
    log_info "Android SDK command line tools installed successfully"
  else
    log_warning "Android SDK command line tools not found."
  fi

  log_task "Android SDK installation completed"
}

# Android Studio installation removed - not required for Flutter Android development
# function install_android_studio() {
#   # ... Android Studio installation code removed
# }

# Android Studio configuration removed - not required for Flutter Android development
# function configure_android_studio_for_flutter() {
#   # ... Android Studio configuration code removed
# }

function configure_flutter_android_sdk() {
  log_task "Configuring Flutter to use Android SDK"

  # Setup Java environment first
  setup_java_environment

  # Set Android SDK environment variables
  export ANDROID_HOME="${ANDROID_SDK_DIR}"
  export ANDROID_SDK_ROOT="${ANDROID_SDK_DIR}"

  # Ensure Flutter is in PATH
  ensure_path_entry "${FLUTTER_INSTALL_DIR}/bin"

  # Ensure Android SDK tools are in PATH
  export PATH="${ANDROID_SDK_DIR}/cmdline-tools/latest/bin:${ANDROID_SDK_DIR}/platform-tools:${ANDROID_SDK_DIR}/emulator:${PATH}"

  # Verify Android SDK is accessible
  if [[ -f "${ANDROID_SDK_DIR}/platform-tools/adb" ]]; then
    log_info "Android SDK ADB found at: ${ANDROID_SDK_DIR}/platform-tools/adb"
  else
    log_warning "Android SDK ADB not found. SDK may not be properly installed."
  fi

  # Configure Flutter to use the Android SDK
  log_info "Configuring Flutter Android SDK path"
  "${FLUTTER_INSTALL_DIR}/bin/flutter" config --android-sdk "${ANDROID_SDK_DIR}"

  # Verify the configuration
  log_info "Flutter Android SDK configuration:"
  "${FLUTTER_INSTALL_DIR}/bin/flutter" config --list | grep android-sdk || true

  # Test Flutter doctor for Android toolchain
  log_info "Testing Flutter Android toolchain detection:"
  "${FLUTTER_INSTALL_DIR}/bin/flutter" doctor --android-licenses --dry-run 2>&1 | head -10 || true

  log_task "Flutter Android SDK configuration completed"
}

function configure_flutter_environment() {
  log_task "Configuring Flutter environment"

  # Setup Java environment first
  setup_java_environment

  # Set Android SDK environment variables
  export ANDROID_HOME="${ANDROID_SDK_DIR}"
  export ANDROID_SDK_ROOT="${ANDROID_SDK_DIR}"

  # Add environment variables to shell configuration
  local shell_configs=("${HOME}/.bashrc" "${HOME}/.zshrc" "${HOME}/.profile")

  for config in "${shell_configs[@]}"; do
    if [[ -f "${config}" ]]; then
      # Add Flutter to PATH
      if ! grep -q "Flutter SDK" "${config}"; then
        log_info "Adding Flutter to PATH in ${config}"
        cat >> "${config}" << 'EOF'

# Flutter SDK
export PATH="$HOME/development/flutter/bin:$PATH"

# Android SDK
export ANDROID_HOME="$HOME/Android/Sdk"
export ANDROID_SDK_ROOT="$HOME/Android/Sdk"
export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$PATH"
export PATH="$ANDROID_HOME/platform-tools:$PATH"
export PATH="$ANDROID_HOME/emulator:$PATH"

# Android Studio
export ANDROID_STUDIO_HOME="$HOME/development/android-studio"
export STUDIO_VM_OPTIONS="$ANDROID_STUDIO_HOME/bin/studio64.vmoptions"
export PATH="$ANDROID_STUDIO_HOME/bin:$PATH"

# Java (SDKMAN)
export JAVA_HOME="$HOME/.sdkman/candidates/java/current"
export PATH="$JAVA_HOME/bin:$PATH"
EOF
      fi
    fi
  done

  log_task "Flutter environment configuration completed"
}

function accept_android_licenses() {
  log_task "Accepting any remaining Android SDK licenses"

  # Setup Java environment first
  setup_java_environment

  # Set Android SDK environment variables
  export ANDROID_HOME="${ANDROID_SDK_DIR}"
  export ANDROID_SDK_ROOT="${ANDROID_SDK_DIR}"

  # Accept licenses using Flutter doctor
  log_info "Running: flutter doctor --android-licenses"
  if yes | "${FLUTTER_INSTALL_DIR}/bin/flutter" doctor --android-licenses; then
    log_info "Android licenses accepted via Flutter doctor"
  else
    log_warning "Failed to accept Android licenses via Flutter doctor"
    log_info "You may need to run 'flutter doctor --android-licenses' manually"
  fi
}

function run_flutter_doctor() {
  log_task "Running Flutter doctor to verify installation"

  # Setup Java environment first
  setup_java_environment

  # Ensure Flutter is in PATH
  ensure_path_entry "${FLUTTER_INSTALL_DIR}/bin"

  # Set Android SDK environment variables
  export ANDROID_HOME="${ANDROID_SDK_DIR}"
  export ANDROID_SDK_ROOT="${ANDROID_SDK_DIR}"

  # Run Flutter doctor
  log_info "Flutter doctor output:"
  "${FLUTTER_INSTALL_DIR}/bin/flutter" doctor -v

  # Check if there are any license issues and try to resolve them
  log_info "Checking for Android license issues..."
  if "${FLUTTER_INSTALL_DIR}/bin/flutter" doctor 2>&1 | grep -q "Some Android licenses not accepted"; then
    log_info "Found Android license issues, attempting to resolve..."
    accept_android_licenses

    # Run Flutter doctor again to verify
    log_info "Re-running Flutter doctor after license acceptance:"
    "${FLUTTER_INSTALL_DIR}/bin/flutter" doctor -v
  fi

  log_task "Flutter installation verification completed"
}

# Main installation process
log_task "Starting Flutter installation with all dependencies"

# Install system dependencies
install_flutter_dependencies

# Install Linux toolchain for desktop development
install_linux_toolchain

# Install Chrome for web development
install_chrome

# Install Flutter SDK
if ! is_flutter_installed; then
  install_flutter
else
  log_info "Flutter is already installed"
fi

# Install Android SDK
if ! is_android_sdk_installed; then
  install_android_sdk
else
  log_info "Android SDK is already installed"
fi

# Install Android Studio
if ! is_android_studio_installed; then
  install_android_studio
else
  log_info "Android Studio is already installed"
fi

# Configure Android Studio for Flutter detection
configure_android_studio_for_flutter

# Configure Flutter to use Android SDK
configure_flutter_android_sdk

# Configure environment
configure_flutter_environment

# Verify installation
run_flutter_doctor

log_task "Flutter installation with all dependencies completed successfully!"
log_info "Please restart your terminal or run 'source ~/.bashrc' to use Flutter commands"
