#!/usr/bin/env bash

# {{ template "scripts-library" }}

# The following line is for ShellCheck to correctly identify the above include
true || source ../.chezmoitemplates/scripts-library

function is_gpg_installed() {
  command -v gpg >/dev/null 2>&1
}

function is_git_installed() {
  command -v git >/dev/null 2>&1
}

function has_gpg_key() {
  local key_id="$1"
  gpg --list-secret-keys --keyid-format LONG "${key_id}" >/dev/null 2>&1
}

function validate_gpg_key_id() {
  local key_id="$1"
  echo "${key_id}" | grep -qE '^[A-F0-9]{8,40}$'
}

function import_gpg_key() {
  local key_file="$1"
  local temp_file=""

  # Check if the file exists
  if [[ ! -f "${key_file}" ]]; then
    log_error "GPG key file '${key_file}' does not exist"
    return 1
  fi

  # If the file is on a Windows mount (like /mnt/c/), try multiple approaches
  if [[ "${key_file}" =~ ^/mnt/[a-z]/ ]]; then
    log_task "Detected Windows filesystem path, attempting to access GPG key"

    # First, try to copy the file to a temp location
    temp_file=$(mktemp)
    log_task "Attempting to copy GPG key from Windows filesystem to temporary location"

    if cp "${key_file}" "${temp_file}" 2>/dev/null; then
      key_file="${temp_file}"
      log_info "GPG key copied to temporary file: ${temp_file}"
    else
      # If copy fails, try using cat to read and pipe to gpg
      log_task "Copy failed, trying alternative method with cat"
      if cat "${key_file}" 2>/dev/null | gpg --import; then
        log_info "GPG key imported successfully using cat method"
        return 0
      else
        log_error "Failed to access GPG key file from OneDrive"
        log_error "This is a known issue with OneDrive and WSL2"
        log_manual_action "Please try one of these solutions:"
        echo "1. Copy the GPG key file to a local WSL2 directory (e.g., ~/gpg-keys/)"
        echo "2. Use Windows PowerShell to copy the file to a different location"
        echo "3. Temporarily move the file outside of OneDrive"
        echo "4. Use Windows Subsystem for Linux with a different file location"
        return 1
      fi
    fi
  fi

  log_task "Importing GPG key from '${key_file}'"
  local import_result=0
  if gpg --import "${key_file}"; then
    log_info "GPG key imported successfully"
    import_result=0
  else
    log_error "Failed to import GPG key from '${key_file}'"
    import_result=1
  fi

  # Clean up temporary file if we created one
  if [[ -n "${temp_file}" && -f "${temp_file}" ]]; then
    rm -f "${temp_file}"
    log_info "Cleaned up temporary GPG key file"
  fi

  return "${import_result}"
}

function configure_git_gpg() {
  local key_id="$1"
  local email="$2"

  log_task "Configuring git for GPG signing"

  # Set the signing key
  git config --global user.signingkey "${key_id}"

  # Enable GPG signing for commits
  git config --global commit.gpgsign true

  # Enable GPG signing for tags
  git config --global tag.gpgsign true

  # Set GPG program (use gpg2 if available, otherwise gpg)
  if command -v gpg2 >/dev/null 2>&1; then
    git config --global gpg.program gpg2
  else
    git config --global gpg.program gpg
  fi

  log_info "Git configured for GPG signing with key ${key_id}"
}

function display_public_key() {
  local key_id="$1"

  log_task "Displaying GPG public key for GitHub"
  echo ""
  log_manual_action "Copy the following GPG public key and add it to your GitHub account:"
  echo ""
  echo "1. Go to GitHub.com → Settings → SSH and GPG keys"
  echo "2. Click 'New GPG key'"
  echo "3. Paste the key below:"
  echo ""
  echo "--- START GPG PUBLIC KEY ---"
  gpg --armor --export "${key_id}"
  echo "--- END GPG PUBLIC KEY ---"
  echo ""
}

function update_chezmoi_data() {
  local key="$1"
  local value="$2"
  local config_file="${HOME}/.config/chezmoi/chezmoi.yaml"

  log_task "Updating chezmoi data: ${key} = ${value}"

  # Check if the config file exists
  if [[ ! -f "${config_file}" ]]; then
    log_error "Chezmoi config file not found at: ${config_file}"
    return 1
  fi

  # Update the value in the config file under the data section
  if command -v yq >/dev/null 2>&1; then
    # Use yq if available (more reliable for YAML manipulation)
    yq eval ".data.${key} = \"${value}\"" -i "${config_file}"
  else
    # Fallback to sed (less reliable but works for simple cases)
    if grep -q "^  ${key}:" "${config_file}"; then
      sed -i "s/^  ${key}:.*/  ${key}: \"${value}\"/" "${config_file}"
    else
      # Find the data section and add the key after it
      sed -i "/^data:/a\\  ${key}: \"${value}\"" "${config_file}"
    fi
  fi

  log_info "Updated chezmoi data: ${key} = ${value}"
}

function suggest_alternative_gpg_path() {
  log_manual_action "Alternative GPG key setup:"
  echo ""
  echo "Since OneDrive access from WSL2 is problematic, here are your options:"
  echo ""
  echo "Option 1: Copy the key to a local WSL2 directory"
  echo "  mkdir -p ~/gpg-keys"
  echo "  # Then copy your private.gpg file to ~/gpg-keys/private.gpg"
  echo "  # Update your chezmoi data: gpg_cert_path: \"~/gpg-keys/private.gpg\""
  echo ""
  echo "Option 2: Use Windows PowerShell to copy the file"
  echo "  # Open PowerShell as Administrator and run:"
  echo "  Copy-Item \"C:\\Users\\lukas\\OneDrive\\Dokumente\\10 - Privat\\40 - Development\\Keys\\Git GPG\\private.gpg\" \"C:\\Users\\lukas\\private.gpg\""
  echo "  # Then update your chezmoi data: gpg_cert_path: \"/mnt/c/Users/lukas/private.gpg\""
  echo ""
  echo "Option 3: Temporarily move the file outside OneDrive"
  echo "  # Move the file to C:\\Users\\lukas\\Documents\\private.gpg"
  echo "  # Update your chezmoi data: gpg_cert_path: \"/mnt/c/Users/lukas/Documents/private.gpg\""
  echo ""
  echo "After updating the path, run this script again."
}

function setup_gpg_signing() {
  log_task "Setting up GPG signing for GitHub"

  # Check if GPG is installed
  if ! is_gpg_installed; then
    log_info "GPG is not installed. Installing GPG..."
    if command -v apt >/dev/null 2>&1; then
      sudo apt update
      sudo apt install -y gnupg
    elif command -v brew >/dev/null 2>&1; then
      brew install gnupg
    else
      log_error "Cannot install GPG automatically. Please install it manually."
      return 1
    fi
  fi

  # Check if git is installed
  if ! is_git_installed; then
    log_error "Git is not installed. Please install it first."
    return 1
  fi

  # Check if we have a GPG certificate path configured
  local gpg_cert_path="{{ .gpg_cert_path }}"
  if [[ -z "${gpg_cert_path}" || "${gpg_cert_path}" == "" ]]; then
    log_info "No GPG certificate path configured. Skipping GPG setup."
    return 0
  fi

  # Check if the certificate file exists
  if [[ ! -f "${gpg_cert_path}" ]]; then
    log_error "GPG certificate file not found at: ${gpg_cert_path}"
    return 1
  fi

  # Import the GPG certificate
  log_task "Importing GPG certificate from ${gpg_cert_path}"
  if ! import_gpg_key "${gpg_cert_path}"; then
    log_error "Failed to import GPG certificate"
    suggest_alternative_gpg_path
    return 1
  fi

  # Extract the key ID from the imported certificate
  local key_id
  key_id=$(gpg --list-secret-keys --keyid-format LONG | grep -E "^sec" | head -1 | awk '{print $2}' | cut -d'/' -f2)

  if [[ -z "${key_id}" ]]; then
    log_error "Could not extract key ID from imported certificate"
    return 1
  fi

  log_info "Extracted GPG key ID: ${key_id}"

  # Update chezmoi data with the GPG key ID
  update_chezmoi_data "gpg_key_id" "${key_id}"

  # Configure git for GPG signing
  configure_git_gpg "${key_id}" "${email:-}"

  # Display public key for GitHub
  display_public_key "${key_id}"

  log_info "GPG signing setup completed!"
  log_manual_action "Next steps:"
  echo "1. Add the GPG public key to your GitHub account (see above)"
  echo "2. Test your setup by making a commit in any git repository"
  echo "3. Verify the commit is signed by checking: git log --show-signature"
}

# Only run if we have a GPG certificate path configured
gpg_cert_path="{{ .gpg_cert_path }}"
if [[ -n "${gpg_cert_path}" && "${gpg_cert_path}" != "" ]]; then
  setup_gpg_signing
else
  log_info "No GPG certificate path configured. Skipping GPG signing setup."
fi
