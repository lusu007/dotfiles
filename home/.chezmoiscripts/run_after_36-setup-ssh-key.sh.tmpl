#!/usr/bin/env bash

# {{ template "scripts-library" }}

# The following line is for ShellCheck to correctly identify the above include
true || source ../.chezmoitemplates/scripts-library

function is_ssh_installed() {
  command -v ssh >/dev/null 2>&1
}

function validate_ssh_key_file() {
  local key_file="$1"
  if [[ ! -f "${key_file}" ]]; then
    return 1
  fi

  # Check if it's a valid SSH private key
  if head -1 "${key_file}" | grep -q "BEGIN.*PRIVATE KEY"; then
    return 0
  else
    return 1
  fi
}

function get_ssh_key_type() {
  local key_file="$1"
  if head -1 "${key_file}" | grep -q "BEGIN RSA PRIVATE KEY"; then
    echo "rsa"
  elif head -1 "${key_file}" | grep -q "BEGIN OPENSSH PRIVATE KEY"; then
    echo "openssh"
  elif head -1 "${key_file}" | grep -q "BEGIN EC PRIVATE KEY"; then
    echo "ecdsa"
  elif head -1 "${key_file}" | grep -q "BEGIN.*PRIVATE KEY"; then
    echo "ed25519"
  else
    echo "unknown"
  fi
}

function copy_ssh_key() {
  local key_file="$1"
  local key_name="$2"

  local ssh_dir="${HOME}/.ssh"
  local key_path="${ssh_dir}/${key_name}"

  # Create .ssh directory if it doesn't exist
  if [[ ! -d "${ssh_dir}" ]]; then
    log_task "Creating SSH directory: ${ssh_dir}"
    mkdir -p "${ssh_dir}"
    chmod 700 "${ssh_dir}"
  fi

  # Copy the key file
  log_task "Copying SSH key to ${key_path}"
  cp "${key_file}" "${key_path}"
  chmod 600 "${key_path}"

  log_info "SSH key copied to ${key_path}"
}


function add_to_ssh_agent() {
  local key_path="$1"

  log_task "Adding SSH key to ssh-agent"

  # Start ssh-agent if not running
  if ! pgrep ssh-agent >/dev/null; then
    log_task "Starting ssh-agent"
    eval "$(ssh-agent -s)"
  fi

  # Add the key to ssh-agent
  if ssh-add "${key_path}"; then
    log_info "SSH key added to ssh-agent"
  else
    log_warning "Failed to add SSH key to ssh-agent"
  fi
}

function generate_public_key() {
  local private_key_path="$1"
  local public_key_path="${private_key_path}.pub"

  log_task "Generating public key from private key"

  if ssh-keygen -y -f "${private_key_path}" > "${public_key_path}"; then
    chmod 644 "${public_key_path}"
    log_info "Public key generated at ${public_key_path}"
    return 0
  else
    log_error "Failed to generate public key from private key"
    return 1
  fi
}

function display_public_key() {
  local key_path="$1"
  local public_key_path="${key_path}.pub"

  # Generate public key if it doesn't exist
  if [[ ! -f "${public_key_path}" ]]; then
    log_info "Public key not found, generating from private key"
    if ! generate_public_key "${key_path}"; then
      log_error "Failed to generate public key"
      return 1
    fi
  fi

  log_task "Displaying SSH public key for GitHub/GitLab"
  echo ""
  log_manual_action "Copy the following SSH public key and add it to your GitHub/GitLab account:"
  echo ""
  echo "GitHub:"
  echo "1. Go to GitHub.com → Settings → SSH and GPG keys"
  echo "2. Click 'New SSH key'"
  echo "3. Paste the key below:"
  echo ""
  echo "GitLab:"
  echo "1. Go to GitLab.com → Preferences → SSH Keys"
  echo "2. Click 'Add new key'"
  echo "3. Paste the key below:"
  echo ""
  echo "--- START SSH PUBLIC KEY ---"
  cat "${public_key_path}"
  echo "--- END SSH PUBLIC KEY ---"
  echo ""
}

function configure_ssh_config() {
  local key_name="$1"
  local key_path="${HOME}/.ssh/${key_name}"

  local ssh_config="${HOME}/.ssh/config"

  log_task "Configuring SSH config"

  # Create SSH config if it doesn't exist
  if [[ ! -f "${ssh_config}" ]]; then
    touch "${ssh_config}"
    chmod 600 "${ssh_config}"
  fi

  # Add GitHub configuration if not already present
  if ! grep -q "Host github.com" "${ssh_config}"; then
    cat >> "${ssh_config}" << EOF

# GitHub
Host github.com
    HostName github.com
    User git
    IdentityFile ${key_path}
    IdentitiesOnly yes
EOF
    log_info "Added GitHub configuration to SSH config"
  else
    log_info "GitHub configuration already exists in SSH config"
  fi

  # Add GitLab configuration if not already present
  if ! grep -q "Host gitlab.com" "${ssh_config}"; then
    cat >> "${ssh_config}" << EOF

# GitLab
Host gitlab.com
    HostName gitlab.com
    User git
    IdentityFile ${key_path}
    IdentitiesOnly yes
EOF
    log_info "Added GitLab configuration to SSH config"
  else
    log_info "GitLab configuration already exists in SSH config"
  fi
}

function test_ssh_connection() {
  log_task "Testing SSH connection to GitHub"

  if ssh -T git@github.com 2>&1 | grep -q "successfully authenticated"; then
    log_info "SSH connection to GitHub successful"
  else
    log_warning "SSH connection to GitHub failed or not configured"
    echo "This is normal if you haven't added the public key to GitHub yet."
  fi

  log_task "Testing SSH connection to GitLab"

  if ssh -T git@gitlab.com 2>&1 | grep -q "successfully authenticated"; then
    log_info "SSH connection to GitLab successful"
  else
    log_warning "SSH connection to GitLab failed or not configured"
    echo "This is normal if you haven't added the public key to GitLab yet."
  fi
}

function update_chezmoi_data() {
  local key="$1"
  local value="$2"
  local data_file="${HOME}/.local/share/chezmoi/.chezmoidata.yaml"

  log_task "Updating chezmoi data: ${key} = ${value}"

  # Create the data file if it doesn't exist
  if [[ ! -f "${data_file}" ]]; then
    log_task "Creating chezmoi data file at: ${data_file}"
    mkdir -p "$(dirname "${data_file}")"
    echo "# Chezmoi data file" > "${data_file}"
    echo "# This file stores dynamic data that can be used in templates" >> "${data_file}"
  fi

  # Update the value in the data file
  if command -v yq >/dev/null 2>&1; then
    # Use yq if available (more reliable for YAML manipulation)
    yq eval ".${key} = \"${value}\"" -i "${data_file}"
  else
    # Fallback to sed (less reliable but works for simple cases)
    if grep -q "^${key}:" "${data_file}"; then
      sed -i "s/^${key}:.*/${key}: \"${value}\"/" "${data_file}"
    else
      echo "${key}: \"${value}\"" >> "${data_file}"
    fi
  fi

  log_info "Updated chezmoi data: ${key} = ${value}"
}

function setup_ssh_key() {
  log_task "Setting up SSH key from certificate"

  # Check if SSH is installed
  if ! is_ssh_installed; then
    log_info "SSH is not installed. Installing SSH client..."
    if command -v apt >/dev/null 2>&1; then
      sudo apt update
      sudo apt install -y openssh-client
    elif command -v brew >/dev/null 2>&1; then
      brew install openssh
    else
      log_error "Cannot install SSH automatically. Please install it manually."
      return 1
    fi
  fi

  # Check if we have an SSH certificate path configured
  local ssh_cert_path="{{ .ssh_cert_path }}"
  if [[ -z "${ssh_cert_path}" || "${ssh_cert_path}" == "" ]]; then
    log_info "No SSH certificate path configured. Skipping SSH setup."
    return 0
  fi

  # Check if the certificate file exists
  if [[ ! -f "${ssh_cert_path}" ]]; then
    log_error "SSH certificate file not found at: ${ssh_cert_path}"
    return 1
  fi

  # Validate the SSH certificate file
  if ! validate_ssh_key_file "${ssh_cert_path}"; then
    log_error "Invalid SSH certificate file: ${ssh_cert_path}"
    return 1
  fi

  # Determine key type and set appropriate key name
  local key_type
  key_type=$(get_ssh_key_type "${ssh_cert_path}")
  local key_name
  case "${key_type}" in
    "rsa") key_name="id_rsa" ;;
    "ed25519") key_name="id_ed25519" ;;
    "ecdsa") key_name="id_ecdsa" ;;
    *) key_name="id_ed25519" ;;  # Default fallback
  esac

  local key_path="${HOME}/.ssh/${key_name}"
  log_info "Detected SSH key type: ${key_type}, using key name: ${key_name}"

  # Update chezmoi data with the SSH key name
  update_chezmoi_data "ssh_key_name" "${key_name}"

  # Copy the certificate to the SSH directory
  log_task "Copying SSH certificate to ${key_path}"
  copy_ssh_key "${ssh_cert_path}" "${key_name}"

  # Add to ssh-agent
  add_to_ssh_agent "${key_path}"

  # Configure SSH config
  configure_ssh_config "${key_name}"

  # Display public key for GitHub/GitLab
  display_public_key "${key_path}"

  # Test SSH connection
  test_ssh_connection

  log_info "SSH key setup completed!"
  log_manual_action "Next steps:"
  echo "1. Add the SSH public key to your GitHub/GitLab account (see above)"
  echo "2. Test your setup by cloning a repository: git clone git@github.com:username/repo.git"
  echo "3. Verify SSH connection: ssh -T git@github.com"
}

# Only run if we have SSH certificate path configured
ssh_cert_path="{{ .ssh_cert_path }}"
if [[ -n "${ssh_cert_path}" && "${ssh_cert_path}" != "" ]]; then
  setup_ssh_key
else
  log_info "No SSH certificate path configured. Skipping SSH key setup."
fi
